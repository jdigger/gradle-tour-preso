buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
        classpath 'io.ratpack:ratpack-groovy:1.4.5'
    }
}

plugins {
    id "java"
    id "idea"
    id "project-report"

    id "org.ajoberstar.grgit" version "1.7.0"
    id "org.ajoberstar.git-publish" version "0.2.0"

    id "org.ysb33r.vfs" version "1.0"

    id "org.asciidoctor.convert" version "1.5.3"
    id "com.github.jruby-gradle.base" version "0.1.5"

//    id "nebula.lint" version "7.3.5"
}

repositories {
    jcenter()
}

dependencies {
    gems "rubygems:asciidoctor:1.5.5"
    gems "rubygems:slim:2.1.0" // template format for AsciiDoc -> Reveal.js

    testCompile "org.gradle:gradle-tooling-api:${gradle.gradleVersion}" // hack to get the source
    testCompile "io.ratpack:ratpack-groovy:1.4.5" // hack to get IDEA to know classes
    testCompile "org.ajoberstar:gradle-git-publish:0.2.0"  // hack to get IDEA to know classes
}

// 2.0.7 breaks the build
configurations.gems.resolutionStrategy.force "rubygems:tilt:2.0.6"

def downloadDir = new File((File) this.projectDir, '.download')
def templateDir = new File(downloadDir, 'templates')
def revealjsDir = new File(downloadDir, 'reveal.js')

task download {
    description = "Download extra revealjs resources"

    def asciidoctorRevealjsVersion = '1.0.2'
    def revealjsVersion = '3.4.1'

    doLast {
        if (!downloadDir.exists()) {
            mkdir downloadDir
        }

        vfs {
            if (!templateDir.exists()) {
                cp "zip:https://github.com/asciidoctor/asciidoctor-reveal.js/archive/v${asciidoctorRevealjsVersion}.zip!asciidoctor-reveal.js-${asciidoctorRevealjsVersion}",
                        templateDir, recursive: true, overwrite: true
            }
            if (!revealjsDir.exists()) {
                cp "zip:https://github.com/hakimel/reveal.js/archive/${revealjsVersion}.zip!reveal.js-${revealjsVersion}",
                        revealjsDir, recursive: true, overwrite: true
            }
        }
    }
    outputs.dir templateDir
    outputs.dir revealjsDir
}

asciidoctor {
    dependsOn jrubyPrepareGems, download

    gemPath = jrubyPrepareGems.outputDir

    sources {
        include 'index.adoc'
    }

    sourceDir = file("src/asciidoc")

    resources {
        from(sourceDir) {
            include 'images/**'
            include '*.css'
        }
        from(downloadDir) {
            include 'reveal.js/**'
        }
    }

    backends 'revealjs'

    attributes 'source-highlighter': 'coderay',
            'imagesdir': './images',
            'proj_root': project.projectDir,
            // 'toc': 'left',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true',
            'revealjs_transition': 'none',
            'revealjs_history': 'true',
            'revealjs_slideNumber': 'true'

    options template_dirs: [new File(templateDir, 'templates/slim').absolutePath]
}

idea {
    project {
        jdkName "1.8"
        languageLevel "1.8"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}

gitPublish {
    branch = 'gh-pages'
    contents {
        from new File((File)buildDir, "asciidoc/revealjs")
    }
}

//gradleLint.rules += 'all-dependency'
//gradleLint.rules += 'archaic-wrapper'

wrapper.gradleVersion = '3.4.1'

// tag::task_serve[]
task serve {
    description = "Serve the presentation on localhost:5050"
    doLast {
        new GroovyShell(this.class.classLoader).evaluate '''import static ratpack.groovy.Groovy.ratpack
        ratpack {
            serverConfig {
                port 5050
                development = true
                baseDir new File('build').absoluteFile.toPath()
            }
            handlers {
                files { dir 'asciidoc/revealjs' indexFiles 'index.html' }
            }
        }
        '''
    }
}
// end::task_serve[]
